generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  role          UserRole       @default(USER)
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  domainAccess  DomainAccess[]
  testAttempts  TestAttempt[]
  createdTests  Test[]         @relation("TestCreator")
  reviewedTests Test[]         @relation("TestReviewer")

  @@map("users")
}

model Domain {
  id           String         @id @default(cuid())
  name         String         @unique
  displayName  String
  description  String?
  icon         String?
  config       Json
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  domainAccess DomainAccess[]
  tests        Test[]

  @@map("domains")
}

model DomainAccess {
  id       String     @id @default(cuid())
  userId   String
  domainId String
  role     DomainRole @default(VIEWER)
  domain   Domain     @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, domainId])
  @@map("domain_access")
}

model Test {
  id               String        @id @default(cuid())
  title            String
  description      String?
  domainId         String
  creatorId        String
  status           TestStatus    @default(DRAFT)
  config           Json
  passPercentage   Int           @default(75)
  timeLimit        Int?
  shuffleQuestions Boolean       @default(true)
  shuffleAnswers   Boolean       @default(true)
  isPublic         Boolean       @default(false)
  submissionNote   String?
  reviewNote       String?
  reviewerId       String?
  reviewedAt       DateTime?
  publishedAt      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  questions        Question[]
  attempts         TestAttempt[]
  creator          User          @relation("TestCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  domain           Domain        @relation(fields: [domainId], references: [id], onDelete: Cascade)
  reviewer         User?         @relation("TestReviewer", fields: [reviewerId], references: [id])

  @@map("tests")
}

model Question {
  id          String       @id @default(cuid())
  testId      String
  stem        String
  explanation String?
  type        QuestionType @default(SINGLE_CHOICE)
  order       Int
  points      Int          @default(1)
  difficulty  Difficulty   @default(MEDIUM)
  tags        String[]     @default([])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  options     Option[]
  test        Test         @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  label      String
  isCorrect  Boolean  @default(false)
  order      Int
  feedback   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}

model TestAttempt {
  id          String        @id @default(cuid())
  testId      String
  userId      String?
  sessionId   String?
  status      AttemptStatus @default(IN_PROGRESS)
  score       Int?
  percentage  Float?
  timeSpent   Int?
  answers     Json
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  test        Test          @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [userId], references: [id])

  @@map("test_attempts")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  GUEST
}

enum DomainRole {
  ADMIN
  MODERATOR
  CREATOR
  VIEWER
}

enum TestStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  REJECTED
  ARCHIVED
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  ESSAY
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIMED_OUT
}
